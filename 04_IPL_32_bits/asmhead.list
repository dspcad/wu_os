     1                                  ; haribote-os
     2                                  
     3                                  BOTPAK  EQU   0x00280000  ; 加载bootpack
     4                                  DSKCAC  EQU   0x00100000  ; 磁盘缓存的位置
     5                                  DSKCAC0 EQU   0x00008000  ; 实模式磁盘缓存的位置
     6                                  
     7                                  ; 有关BOOT_INFO
     8                                  CYLS    EQU   0x0ff0      ; 设置启动区
     9                                  LEDS    EQU   0x0ff1
    10                                  VMODE   EQU   0x0ff2      ; 关于颜色数目的信息，颜色的位数
    11                                  SCRNX   EQU   0x0ff4      ; 分辨率X
    12                                  SCRNY   EQU   0x0ff6      ; 分辨率Y
    13                                  VRAM    EQU   0x0ff8      ; 图像缓冲区的起始位置
    14                                  
    15                                    ; 使用linker script指定起始地址
    16                                    ; ORG   0xc200            ; 程序被加载的内存地址
    17                                  
    18                                    [SECTION .btext]
    19                                    [BITS 16]
    20                                  entry:
    21                                  ; 设置屏幕模式
    22 00000000 B013                      MOV   AL, 0x13          ; VGA显卡，320x200x8 bit
    23 00000002 B400                      MOV   AH, 0x00
    24 00000004 CD10                      INT   0x10
    25                                  
    26 00000006 C606F20F08                MOV   BYTE [VMODE], 8   ; 屏幕的模式
    27 0000000B C706F40F4001              MOV   WORD [SCRNX], 320
    28 00000011 C706F60FC800              MOV   WORD [SCRNY], 200
    29 00000017 66C706F80F00000A00        MOV   DWORD [VRAM], 0x000a0000
    30                                  
    31                                  ; 用BIOS取得键盘上各种LED指示灯的状态
    32 00000020 B402                      MOV   AH, 0x02
    33 00000022 CD16                      INT   0x16              ; 键盘BIOS
    34 00000024 A2F10F                    MOV   [LEDS], AL
    35                                  
    36                                  ; 防止PIC接受所有中断
    37                                  ;   根据AT兼容机的规范初始化PIC
    38                                  ;   如果没有在CLI指令前执行可能会挂起
    39                                  ;   并继续初始化PIC
    40 00000027 B0FF                      MOV   AL, 0xff
    41 00000029 E621                      OUT   0x21, AL
    42 0000002B 90                        NOP                     ; 有些机器不能连续执行NOP指令
    43 0000002C E6A1                      OUT   0xa1, AL
    44                                  
    45 0000002E FA                        CLI
    46                                  
    47                                  ; 设置A20GATE使CPU支持1M以上的内存
    48 0000002F E89100                    CALL  waitkbdout
    49 00000032 B0D1                      MOV   AL, 0xd1
    50 00000034 E664                      OUT   0x64, AL
    51 00000036 E88A00                    CALL  waitkbdout
    52 00000039 B0DF                      MOV   AL, 0xdf          ; 开启A20
    53 0000003B E660                      OUT   0x60, AL
    54 0000003D E88300                    CALL  waitkbdout
    55                                  
    56                                  ; 切换到保护模式
    57                                  ; NASM不支持INSTRSET命令
    58                                  ; [INSTRSET "i486p"]        ; 使用486指令
    59 00000040 0F0116[0A01]              LGDT  [GDTR0]           ; 设置临时GDT
    60 00000045 0F20C0                    MOV   EAX, CR0
    61 00000048 6625FFFFFF7F              AND   EAX, 0x7fffffff   ; 禁用分页
    62 0000004E 6683C801                  OR    EAX, 0x00000001   ; 开启保护模式
    63 00000052 0F22C0                    MOV   CR0, EAX
    64 00000055 EB00                      JMP   pipelineflush
    65                                  
    66                                  pipelineflush:
    67 00000057 B80800                    MOV   AX, 1*8           ; 写32bit段
    68 0000005A 8ED8                      MOV   DS, AX
    69 0000005C 8EC0                      MOV   ES, AX
    70 0000005E 8EE0                      MOV   FS, AX
    71 00000060 8EE8                      MOV   GS, AX
    72 00000062 8ED0                      MOV   SS, AX
    73                                  
    74                                  ; bootpack传递
    75 00000064 66BE[10010000]            MOV   ESI, bootpack     ; 源
    76 0000006A 66BF00002800              MOV   EDI, BOTPAK       ; 目标
    77 00000070 66B900000200              MOV   ECX, 512*1024/4
    78 00000076 E85100                    CALL  memcpy
    79                                  
    80                                  ; 传输磁盘数据
    81                                  
    82                                  ; 从引导区开始
    83                                  
    84 00000079 66BE007C0000              MOV   ESI, 0x7c00       ; 源
    85 0000007F 66BF00001000              MOV   EDI, DSKCAC       ; 目标
    86 00000085 66B980000000              MOV   ECX, 512/4
    87 0000008B E83C00                    CALL  memcpy
    88                                  
    89                                  ; 剩余的全部
    90 0000008E 66BE00820000              MOV   ESI, DSKCAC0+512  ; 源
    91 00000094 66BF00021000              MOV   EDI, DSKCAC+512   ; 目标
    92 0000009A 66B900000000              MOV   ECX, 0
    93 000000A0 8A0EF00F                  MOV   CL, BYTE [CYLS]
    94 000000A4 6669C900120000            IMUL  ECX, 512*18*2/4   ; 除以4得到字节数
    95 000000AB 6681E980000000            SUB   ECX, 512/4        ; IPL偏移量
    96 000000B2 E81500                    CALL  memcpy
    97                                  
    98                                  ; 由于还需要asmhead才能完成
    99                                  ; 完成其余的bootpack任务
   100                                  
   101                                  ; bootpack启动
   102                                  ; 修改后检验不通过，移除校验
   103                                    ; MOV   EBX, BOTPAK
   104                                    ; MOV   ECX, [EBX+16]
   105                                    ; ADD   ECX, 3            ; ECX += 3
   106                                    ; SHR   ECX, 2            ; ECX /= 4
   107                                    ; JZ    skip              ; 传输完成
   108                                    ; MOV   ESI, [EBX+20]     ; 源
   109                                    ; ADD   ESI, EBX
   110                                    ; MOV   EDI, [EBX+12]     ; 目标
   111                                    ; CALL  memcpy
   112                                  
   113                                  skip:
   114                                    ; MOV   ESP, [EBX+12]     ; 堆栈初始化
   115                                    ; JMP   DWORD 2*8:0x0000001b
   116 000000B5 66BCFFFF0000              MOV   ESP, 0xffff
   117 000000BB 66EA000000001000          JMP   DWORD 2*8:0x00000000
   118                                  
   119                                  waitkbdout:
   120 000000C3 E464                      IN    AL, 0x64
   121 000000C5 2402                      AND   AL, 0x02
   122 000000C7 75FA                      JNZ   waitkbdout        ; AND结果不为0跳转至waitkbdout
   123 000000C9 C3                        RET
   124                                  
   125                                  memcpy:
   126 000000CA 66678B06                  MOV   EAX, [ESI]
   127 000000CE 6683C604                  ADD   ESI, 4
   128 000000D2 66678907                  MOV   [EDI], EAX
   129 000000D6 6683C704                  ADD   EDI, 4
   130 000000DA 6683E901                  SUB   ECX, 1
   131 000000DE 75EA                      JNZ   memcpy            ; 结果不为0跳转至memcpy
   132 000000E0 C3                        RET
   133                                  ; memcpy地址前缀大小
   134                                  
   135 000000E1 90<rep Fh>                ALIGN 16
   136                                  GDT0:
   137 000000F0 ????????????????          RESB  8                 ; 初始值
   137          ******************       warning: uninitialized space declared in non-BSS section `.btext': zeroing [-w+zeroing]
   138 000000F8 FFFF00000092CF00          DW    0xffff, 0x0000, 0x9200, 0x00cf  ; 可写的32位段寄存器
   139 00000100 FFFF0000289A4700          DW    0xffff, 0x0000, 0x9a28, 0x0047  ; 可执行的文件的32位寄存器
   140                                  
   141 00000108 0000                      DW    0
   142                                  
   143                                  GDTR0:
   144 0000010A 1700                      DW    8*3-1
   145 0000010C [F0000000]                DD    GDT0
   146                                  
   147                                    ALIGN 16
   148                                  bootpack:
